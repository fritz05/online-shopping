// import { useTranslation } from 'react-i18next';
// import { NSP } from '@/consts';
// import { alertFirstError, getKeys } from '@/utils';
// import { useRpcData } from '@/hooks';
// import { FormProvider, useForm } from 'react-hook-form';
// import { useMutation } from '@tanstack/react-query';

// import type { AmpBasicForm } from '../../types';
// import { getRequestObjects } from '../../rpc';
// import { saveAmpSettings } from '../../apis';
// import { COUNTRY_WITH_BOARD, PAGE_LIST } from '../../consts';

// import VerifyDomain from './VerifyDomain';
// import EnableAmp from './EnableAmp';
// import UsageScreen from './UsageScreen';
// import ProductImages from './ProductImages';
// import ScriptId from './ScriptId';
// import { ButtonContainer, ButtonSave } from './AmpSettings.style';

// function AmpSettingsLayout() {
//   const { t } = useTranslation(NSP.CHANNEL_AMP);

//   const {
//     data: { countryCode },
//   } = useRpcData({
//     requests: getRequestObjects(),
//     pathnames: ['common'],
//     queryOpts: {
//       suspense: true,
//     },
//   });

//   const {
//     data: { basicConfig, primaryDomain: baseDomain },
//   } = useRpcData({
//     requests: getRequestObjects(),
//     pathnames: ['ampBasic'],
//     queryOpts: {
//       suspense: true,
//     },
//   });

//   const isShowBoard = COUNTRY_WITH_BOARD.includes(countryCode);

//   let ampDefaultValues: Partial<AmpBasicForm> = {};
//   getKeys(basicConfig).forEach((key) => {
//     if (key === 'useBoardDetail' && !isShowBoard) {
//       ampDefaultValues[key] = false;
//       return;
//     }

//     ampDefaultValues = {
//       ...ampDefaultValues,
//       [key]: PAGE_LIST.includes(key)
//         ? basicConfig[key] === 'T'
//         : basicConfig[key],
//     };
//   });

//   const methods = useForm<AmpBasicForm>({
//     defaultValues: {
//       ...ampDefaultValues,
//       primaryDomain: baseDomain,
//       hasBoardDetail: isShowBoard,
//     },
//   });

//   const { handleSubmit, watch } = methods;
//   const isAmpEnabled = watch('isUse') === 'T';
//   const mutation = useMutation(saveAmpSettings, {
//     mutationKey: ['saveAmpSettings'],
//   });

//   const handleSaveAmpSettings = async (params: AmpBasicForm) => {
//     const {
//       useMain,
//       useProductList,
//       useProductDetail,
//       useBoardDetail,
//       listImageWidth,
//       listImageHeight,
//     } = params;

//     const pageToDisplay = [
//       useMain,
//       useProductList,
//       useProductDetail,
//       useBoardDetail,
//     ];

//     const hasImageSize = Number(listImageWidth) || Number(listImageHeight);

//     if (!pageToDisplay.includes(true)) {
//       alert(t('PLEASE.SELECT.USE'));
//       return;
//     }

//     if (!hasImageSize) {
//       alert(t('LIST.ENTER.IMAGE.SIZE'));
//       return;
//     }

//     const { result, message } = await mutation.mutateAsync(params);

//     if (!result) {
//       mutation.reset();
//       alert(message);
//       return;
//     }

//     alert(t('AMP.USAGE.SETTINGS.SAVED'));
//   };

//   return (
//     <FormProvider {...methods}>
//       <form onSubmit={handleSubmit(handleSaveAmpSettings, alertFirstError)}>
//         <EnableAmp />
//         {isAmpEnabled && (
//           <>
//             <VerifyDomain />
//             <UsageScreen />
//             <ProductImages />
//             <ScriptId />
//           </>
//         )}
//         <ButtonContainer>
//           <ButtonSave variant="submit" type="submit">
//             {t('SAVE', { ns: NSP.COMMON })}
//           </ButtonSave>
//         </ButtonContainer>
//       </form>
//     </FormProvider>
//   );
// }

// export default AmpSettingsLayout;

// import { useTranslation } from 'react-i18next';
// import { NSP } from '@/consts';
// import { Heading } from '@/comps';
// import { useHelptipLayout, useRpcData } from '@/hooks';
// import { useFormContext } from 'react-hook-form';

// import { getRequestObjects } from '../../rpc';
// import { HELP_TIP, HELP_TIP_ID } from '../../consts';
// import type { AmpBasicForm } from '../../types';

// import {
//   ContentContainer,
//   ColumnLayoutInherit,
//   ColumnHeaderInherit,
//   AmpHelpTip,
//   ColumnLayoutCellInherit,
//   HeadingAreaInherit,
//   RadioItemInherit,
// } from './AmpSettings.style';

// function VerifyDomain() {
//   const { t } = useTranslation(NSP.CHANNEL_AMP);
//   const { register } = useFormContext<AmpBasicForm>();

//   const {
//     data: { adminLanguageCode },
//   } = useRpcData({
//     requests: getRequestObjects(),
//     pathnames: ['common'],
//     queryOpts: {
//       suspense: true,
//     },
//   });

//   const { data: tipData } = useHelptipLayout(HELP_TIP, adminLanguageCode, {
//     suspense: true,
//   });

//   return (
//     <ContentContainer>
//       <HeadingAreaInherit>
//         <Heading element="h2" label={t('ENABLE.GOOGLE.AMP')}>
//           <AmpHelpTip
//             id={`${HELP_TIP_ID}20`}
//             lang={adminLanguageCode}
//             code={`${HELP_TIP}.20`}
//             tipWrap={tipData?.[`${HELP_TIP}.20`]}
//           />
//         </Heading>
//       </HeadingAreaInherit>
//       <ColumnLayoutInherit size="medium">
//         <>
//           <ColumnHeaderInherit>{t('ENABLE.GOOGLE.AMP')}</ColumnHeaderInherit>
//           <ColumnLayoutCellInherit>
//             <RadioItemInherit
//               value="T"
//               label={t('USED', { nsp: NSP.COMMON })}
//               {...register('isUse')}
//             />
//             <RadioItemInherit
//               value="F"
//               label={t('NOT.USED', { nsp: NSP.COMMON })}
//               {...register('isUse')}
//             />
//           </ColumnLayoutCellInherit>
//         </>
//       </ColumnLayoutInherit>
//     </ContentContainer>
//   );
// }

// export default VerifyDomain;
